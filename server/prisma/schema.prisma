// MIT License
//
// Copyright (c) 2022-2022 Carlo Corradini
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username    String            @unique
  password    String
  roles       UserRoles[]       @default([SIMPLE])
  permissions UserPermissions[] @default([])
  createdAt   DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
}

enum UserRoles {
  ADMIN
  SIMPLE
}

enum UserPermissions {
  // FIXME
  UNKNOWN
}

model Node {
  id                             String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  roles                          NodeRoles[]
  permissions                    NodePermissions[] @default([])
  status                         Status?
  cpu                            Cpu               @relation(fields: [cpuId], references: [id], map: "cpu_id")
  cpuId                          String            @db.Uuid
  ram                            BigInt
  disks                          Disk[]
  interfaces                     Interface[]
  minPowerConsumption            Int               @map("min_power_consumption")
  maxEfficiencyPowerConsumption  Int?              @map("max_efficiency_power_consumption")
  minPerformancePowerConsumption Int?              @map("min_performance_power_consumption")
  maxPowerConsumption            Int               @map("max_power_consumption")
  createdAt                      DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt                      DateTime          @updatedAt @map("updated_at") @db.Timestamptz()
}

enum NodeRoles {
  RECLUSTER_MASTER
  K8S_MASTER
  K8S_WORKER
}

enum NodePermissions {
  // FIXME
  UNKNOWN
}

model Status {
  id             String       @id @db.Uuid
  node           Node         @relation(fields: [id], references: [id])
  status         NodeStatuses
  reason         String?
  message        String?
  lastHeartbeat  DateTime?    @map("last_heartbeat") @db.Timestamptz()
  lastTransition DateTime     @map("last_transition") @db.Timestamptz()
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz()
}

enum NodeStatuses {
  ACTIVE
  ACTIVE_READY
  ACTIVE_NOT_READY
  INACTIVE
  UNKNOWN
}

model Disk {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node      Node     @relation(fields: [nodeId], references: [id], map: "node_id")
  nodeId    String   @db.Uuid
  name      String
  size      BigInt
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz()

  @@unique([nodeId, name])
}

model Interface {
  id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  node      Node                @relation(fields: [nodeId], references: [id], map: "node_id")
  nodeId    String              @db.Uuid
  name      String
  address   String
  speed     BigInt
  wol       InterfaceWoLFlags[] @default([])
  createdAt DateTime            @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime            @updatedAt @map("updated_at") @db.Timestamptz()

  @@unique([nodeId, name])
  @@unique([address])
}

enum InterfaceWoLFlags {
  a
  b
  d
  g
  m
  p
  s
  u
}

model Cpu {
  id                   String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  architecture         CpuArchitectures
  flags                String[]         @default([])
  cores                Int
  vendor               CpuVendors
  family               Int
  model                Int
  name                 String
  cacheL1d             Int              @map("cache_l1d")
  cacheL1i             Int              @map("cache_l1i")
  cacheL2              Int              @map("cache_l2")
  cacheL3              Int              @map("cache_l3")
  vulnerabilities      String[]         @default([])
  singleThreadScore    Int              @map("single_thread_score")
  multiThreadScore     Int              @map("multi_thread_score")
  efficiencyThreshold  Int?             @map("efficiency_threshold")
  performanceThreshold Int?             @map("performance_threshold")
  createdAt            DateTime         @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt            DateTime         @updatedAt @map("updated_at") @db.Timestamptz()

  nodes Node[]

  @@unique([vendor, family, model])
}

enum CpuArchitectures {
  x86_64
}

enum CpuVendors {
  AMD
  INTEL
}
